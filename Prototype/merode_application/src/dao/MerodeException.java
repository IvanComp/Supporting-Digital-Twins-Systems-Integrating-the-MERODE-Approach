/**
 * Attention: Generated source! Do not modify by hand!
 * Generated by: Merode Code Generator 2.0
 */
package dao;

import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

import org.apache.commons.beanutils.PropertyUtils;

import dao.MerodeLogger;

/** 
 * 
 */
public class MerodeException 
    extends java.lang.Exception
{
    /**
     * The default constructor.
     */
    public MerodeException() 
    {}

	/**
	 * Constructs a new instance of MerodeException
	 *
	 * @param throwable the parent Throwable
	 */
	public MerodeException(Throwable throwable) 
	{
		super(findRootCause(throwable));	
	}
	
	/**
	 * Constructs a new instance of MerodeException
	 *
	 * @param message the throwable message.
	 */
	public MerodeException(String message) 
	{
		super(message);	
		
		// trying to remove the last "\n" to jump to the previous line
		Document doc = MerodeLogger.log.getDocument();
		if (doc.getLength() > 0){
			try {
				int position = doc.getLength() - 1;
				if ("\n".equals(doc.getText(position, 1))) {
					// better remove
					doc.remove(position, 1);

				}
			} catch (BadLocationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}	
			
		}
		MerodeLogger.logln("failed");
		MerodeLogger.logln(message);

	}

	
	/**
	 * Constructs a new instance of MerodeException
	 *
	 * @param message the throwable message.
	 * @param throwable the parent of this Throwable.
	 */
	public MerodeException(String message, Throwable throwable) 
	{
		super(message, findRootCause(throwable));	
	}
	
	/**
	 * Finds the root cause of the parent exception
	 * by traveling up the exception tree
	 */
    private static Throwable findRootCause(Throwable th) 
    {
    	if (th != null) 
    	{
            final String methodName = "MerodeException.findRootCause";
            if (th == null) {
                throw new IllegalArgumentException(methodName + 
                    " 'throwable can not be null"); 
            }
            
            // Lets reflectively get any JMX or EJB exception causes.
            try 
            {
                Throwable targetException = null;
                //java.lang.reflect.InvocationTargetException 
                //or javax.management.ReflectionException
                String exceptionProperty = "targetException";
                if (PropertyUtils.isReadable(th, exceptionProperty)) 
                {
                    targetException = (Throwable)PropertyUtils.getProperty(th, exceptionProperty);
                } 
                else 
                {
                	exceptionProperty = "causedByException";
                    //javax.ejb.EJBException
                    if (PropertyUtils.isReadable(th, exceptionProperty)) 
                    {
                    	targetException = (Throwable)PropertyUtils.getProperty(th, exceptionProperty);
                    }
                }
                if (targetException != null) 
                {
                	th = targetException;
                }
            } 
            catch (Exception ex) 
            {
            	// just print the exception and continue
                ex.printStackTrace();
            }
            
            if (th.getCause() != null) 
            {
                th = th.getCause();
                th = findRootCause(th);
            }
        }
        return th;
	}	
}
