/**
 * Attention: Generated source! Do not modify by hand!
 * Generated by: Merode Code Generator 2.0
 */
package ui.tabs.tables;

import javax.swing.*;
import javax.swing.border.*;
import java.awt.event.*;
import java.awt.*;

import java.util.*;

import javax.swing.event.*;
import javax.swing.table.*;

import ui.tabs.tables.renderers.ObjectTableRowRenderer;

public abstract class ObjectTable extends JTable {
	
	private final static int ROW_HEIGHT = 20;
	
	public ObjectTableModel model;
	public ArrayList objects;

	public ObjectTable() {
		super();
		setRowHeight(ROW_HEIGHT);
		model = new ObjectTableModel();
		setModel(model);
		getSelectionModel().setSelectionMode(
				ListSelectionModel.SINGLE_SELECTION);
	    TableCellRenderer renderer = new ObjectTableRowRenderer();
	    setDefaultRenderer(Object.class, renderer);
    	addHeaderHelpers();

	}

	private void addHeaderHelpers() {
	    this.getTableHeader().addMouseListener(new MouseAdapter(){
    		public void mouseClicked(MouseEvent e){
    	        JTable table = ((JTableHeader) e.getSource()).getTable();
    	        TableColumnModel columnModel = table.getColumnModel();
    	        int viewColumn = columnModel.getColumnIndexAtX(e.getX());
    	        int modelColumn = table.convertColumnIndexToModel(viewColumn);
    	        // popup helper for column 3
    			if( modelColumn == 3 ){
    				 JOptionPane.showMessageDialog(
    						 null,
    						 messages.MessageProperties.FINAL_STATE_INFO,
    						 messages.MessageProperties.HELP,
    						 JOptionPane.QUESTION_MESSAGE);
    			} 
		
    		}
    	} );
		
	}

	public void refresh() {
		getAllObjects();
		attachRenderers();
		for (int i = model.getRowCount(); i > 0; i--) {
			model.removeRow(i - 1);
		}
		createRows();
	}

	protected abstract void getAllObjects();
	
	protected abstract void createRows();

	protected abstract void attachRenderers();
}

class ObjectTableModel extends DefaultTableModel {
	public Vector editableColumns;

	public ObjectTableModel() {
		super();
		editableColumns = new Vector();
	}

//	public Class getColumnClass(int column) {
//		return (getValueAt(0, column).getClass());
//	}

	public boolean isCellEditable(int row, int column) {
		return editableColumns.contains(new Integer(column));
	}
}
