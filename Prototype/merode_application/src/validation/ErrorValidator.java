/**
 * Attention: Generated source! Do not modify by hand!
 * Generated by: Merode Code Generator 2.0
 */
package validation;

import java.io.File;
import java.lang.reflect.Field;

import javax.swing.JOptionPane;
import java.util.*;

public class ErrorValidator {
	
	static String USER_DIRECTORY = "user.dir";
	static String FILE_SEPARATOR = "file.separator";
	
    final static String IMAGES_URL = "/images";
    final static String userDir = System.getProperty(USER_DIRECTORY);
    final static String fileSeparator = System.getProperty(FILE_SEPARATOR);
	final static String imgDir = (userDir + IMAGES_URL).replace(fileSeparator, "/");
	static String classDiagramImgName = "";

	public static void processErrors(String errors, Field[] privateMembers, String objName) {
 		String[] imgFiles = new File(imgDir).list();   		
 		for(int k = 0; k < imgFiles.length; ++k){
 			if(!(imgFiles[k].contains("FSM_") || imgFiles[k].contains("OET_"))){
 				classDiagramImgName = imgFiles[k];
 			}
 		}
    	if (errors.contains(ErrorWindow.MISSING_ATTRIBUTE)
    			|| errors.contains(ErrorWindow.MISSING_OBJECT)
    				|| errors.contains(ErrorWindow.WRONG_DATATYPE_FORMAT)){
    		String[] arg = new String[2];
    		arg[0] = errors.contains(ErrorWindow.MISSING_ATTRIBUTE) ? 
    				ErrorWindow.MISSING_ATTRIBUTE : ErrorWindow.MISSING_OBJECT;
    		arg[1] = errors;
    		try {
				ErrorWindow.main(arg);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	} else if (errors.contains(ErrorWindow.DEPENDENCY_RULE_VIOLATION)){
     		String parentNames = "";
            /*String parentNameMember = "";
            for (int i = 0; i <= privateMembers.length - 1; ++i ){
            	parentNameMember = (privateMembers[i]).toString();
            	String cellVal = parentNameMember.substring(
           				parentNameMember.indexOf("t_") + 2, parentNameMember.length()).toUpperCase();
            	parentNames = "".equals(parentNames) ? cellVal
               				: parentNames + ", " + cellVal;
            }*/
     		while (errors.contains(ErrorWindow.DEPENDENCY_RULE_VIOLATION)){
     			errors = errors.substring(errors.indexOf(ErrorWindow.DEPENDENCY_RULE_VIOLATION) 
     					+ ErrorWindow.DEPENDENCY_RULE_VIOLATION.length() + 2);
     			if (errors.contains(ErrorWindow.DEPENDENCY_RULE_VIOLATION)){
         			parentNames += errors.substring( 0, errors.indexOf(ErrorWindow.DEPENDENCY_RULE_VIOLATION)).toUpperCase() + ",";  
         			errors = errors.substring(errors.indexOf(ErrorWindow.DEPENDENCY_RULE_VIOLATION));
     			} else {
     				parentNames += errors.toUpperCase();
     				errors = "";
     			}
     		}

     		String[] arg = new String[4];
     		arg[0] = ErrorWindow.DEPENDENCY_RULE_VIOLATION;
     		arg[1] = objName;
     		arg[2] = "".equals(classDiagramImgName) ? "undetected"
     				: (classDiagramImgName.contains("EDG_")? "EDG.png"
					: "UML.png");
     		arg[3] = parentNames;
     		try {
     			ErrorWindow.main(arg);
     		} catch (Exception e) {
     			// TODO Auto-generated catch block
     			e.printStackTrace();
     		}
    	} else {
    		JOptionPane.showMessageDialog(null,errors,"Error",JOptionPane.ERROR_MESSAGE);
    	}		
	}

	public static void processErrors(String errors) {
    	if ((errors.contains(ErrorWindow.MISSING_ATTRIBUTE)
    			|| errors.contains(ErrorWindow.MISSING_OBJECT))){
    		String[] arg = new String[2];
    		arg[0] = errors.contains(ErrorWindow.MISSING_ATTRIBUTE) ? 
    				ErrorWindow.MISSING_ATTRIBUTE : ErrorWindow.MISSING_OBJECT;
    		arg[1] = errors;
    		try {
				ErrorWindow.main(arg);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}  else {
    		JOptionPane.showMessageDialog(null,errors,"Error",JOptionPane.ERROR_MESSAGE);
    	}		
	}

	
	public static void processExceptions(dao.MerodeException me) {
 		String[] imgFiles = new File(imgDir).list();   		
 		for(int k = 0; k < imgFiles.length; ++k){
 			if(!(imgFiles[k].contains("FSM_") || imgFiles[k].contains("OET_"))){
 				classDiagramImgName = imgFiles[k];
 			}
 		}
		String objName = "";
    	if (me.toString().contains(ErrorWindow.WRONG_STATE)){
            String pattern = "";
            if (me.toString().contains(".cr_")){
            	pattern = ".cr_";
            } else if (me.toString().contains(".end_")){
            	pattern = ".end_";
            } else {
            	pattern = ".";
            }
			String[] partsArray = me.getMessage().toString().split(" ");
			ArrayList<String> parts = new ArrayList<String>(Arrays.asList(partsArray));
    		objName = parts.get(parts.indexOf("named") + 1);;
            String referredFSM = objName.toUpperCase();
            String[] arg = new String[6];
            arg[0] = ErrorWindow.WRONG_STATE;
            arg[1] = objName;
            arg[2] = "FSM_" + referredFSM + "_User_Specified.png";
            arg[3] = referredFSM;
            arg[4] = parts.get(parts.indexOf("called") + 1);
            arg[5] = parts.get(parts.indexOf("name") + 1);
            try {
				ErrorWindow.main(arg);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	} else if (me.toString().contains(ErrorWindow.CREATE_PRECONDITION_VIOLATION)){
    		String message = me.getMessage().toString().trim();
    		objName = 
    			message.substring(
    					message.indexOf("Object already has a living dependent ") + 38, 
    					message.length()
    			);
    		String dependencyObjectName = me.getMessage().substring(
    	        me.getMessage().toString().indexOf("in class ") + 9, 
					me.getMessage().toString().lastIndexOf(":")
    			);
            String[] arg = new String[4];
            arg[0] = ErrorWindow.CREATE_PRECONDITION_VIOLATION;
            arg[1] = dependencyObjectName.toUpperCase();
     		arg[2] = "".equals(classDiagramImgName) ? "undetected"
     				: (classDiagramImgName.contains("EDG_")? "EDG.png"
					: "UML.png");
 	    	arg[3] =  objName;
            try {
				ErrorWindow.main(arg);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	} else if (me.toString().contains(ErrorWindow.END_PRECONDITION_VIOLATION)){
    		objName = me.getMessage().substring(
        	        me.getMessage().toString().indexOf("in class ") + 9, 
    					me.getMessage().toString().lastIndexOf(":")
        			).toUpperCase();
            String[] arg = new String[4];
            arg[0] = ErrorWindow.END_PRECONDITION_VIOLATION;
 	    	arg[1] = me.getMessage().toString().substring(
	    			 	me.getMessage().toString().indexOf(ErrorWindow.LIVING_DEPENDENTS) + ErrorWindow.LIVING_DEPENDENTS.length() + 1).trim().toUpperCase();//XMLProperties.getDependents(objName).toUpperCase();
     		arg[2] = "".equals(classDiagramImgName) ? "undetected"
     				: (classDiagramImgName.contains("EDG_")? "EDG.png"
					: "UML.png");
            arg[3] = objName;
            try {
				ErrorWindow.main(arg);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	} else {
    		JOptionPane.showMessageDialog(null,me,"Error",JOptionPane.ERROR_MESSAGE);
    	} 


	}

}
