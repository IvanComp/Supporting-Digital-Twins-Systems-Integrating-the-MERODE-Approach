/**
 * Attention: Generated source! Do not modify by hand!
 * Generated by: Merode Code Generator 2.0
 */
package validation;


import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Shape;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.concurrent.atomic.AtomicReference;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.UIManager;

import dao.MerodeLogger;

import net.miginfocom.swing.MigLayout;

public class ErrorWindow {

	public static String MISSING_ATTRIBUTE = "Please fill in attribute";
	public static String WRONG_DATATYPE_FORMAT = "Please provide a valid";
	public static String MISSING_OBJECT = messages.MessageProperties.NO_ROW_SELECTED;
	public static String DEPENDENCY_RULE_VIOLATION = "Please select master";
	static String MISSING_OBJECT_MESSAGE = "No object was selected for this operation.";
	static String WRONG_STATE = "Can't execute";
	static String CREATE_PRECONDITION_VIOLATION = "Precondition violation in creating method";
	static String END_PRECONDITION_VIOLATION = "Precondition violation in ending method";
	static String USER_DIRECTORY = "user.dir";
	static String FILE_SEPARATOR = "file.separator";
	static String SEE_EDG = "See my EDG";
	static String SEE_UML = "See my UML";
	static String SEE_FSM = "See my FSM";
	static String SEE_ALL = "See all";
	static String CANCEL = "Cancel";
	static String LIVING_DEPENDENTS = "Object has living dependents";
	
	// error titles
	static String MASTER_DEPENDENCY_VIOLATION = "Creation dependency";
	static String SEQUENCE_CONSTRAINT = "Sequence constraint";
	static String CARDINALITY_CONSTRAINT = "Cardinality constraint";
	static String REFERENTIAL_INTEGRITY = "Referential integrity";
	
	static String errors = "";
	static String dialogTitle = "";
	
	
    final static String IMAGES_URL = "/images";
    
    public static URL getIconURL(Class<ErrorWindow> c, String fileName) {
		return c.getResource(fileName);
	}

    public static void main(final String args[]) throws Exception {
		
		String userDir = System.getProperty(USER_DIRECTORY);
		String fileSeparator = System.getProperty(FILE_SEPARATOR);
		// userDir = userDir.replace(fileSeparator,"/");
		final String imgDir = (userDir + IMAGES_URL).replace(fileSeparator, "/");

		String buttonLabel = "";
		String diagramType = "";
		
		String[] imgFiles = new File(imgDir).list();
		String classDiagramImgName = null;
		for(int k = 0; k < imgFiles.length; ++k){
			if(!(imgFiles[k].contains("FSM_") || imgFiles[k].contains("OET_"))){
				classDiagramImgName = imgFiles[k];
			}
		}

		if (MISSING_ATTRIBUTE.equals(args[0]) || MISSING_OBJECT.equals(args[0])) {
			String pattern = MISSING_ATTRIBUTE.equals(args[0]) ? MISSING_ATTRIBUTE
					: args[1];
			String imgURL = MISSING_ATTRIBUTE.equals(pattern) ? "errorsOptionPaneImages/infoMessageImage.jpg"
					: "errorsOptionPaneImages/highlight.png";

			UIManager.put("OptionPane.background", Color.white);
			UIManager.put("Panel.background", Color.white);
			ImageIcon icon = new javax.swing.ImageIcon(getIconURL(
					validation.ErrorWindow.class, imgURL));
			errors = args[1].substring(args[1].lastIndexOf(pattern), args[1]
					.lastIndexOf("\n") != -1 ? args[1].lastIndexOf("\n")
					: args[1].length());
			JOptionPane.showMessageDialog(null, errors, "Missing value",
					JOptionPane.ERROR_MESSAGE, icon);
			return;
		} else if (DEPENDENCY_RULE_VIOLATION.equals(args[0])) {
			buttonLabel = "".equals(classDiagramImgName) ? "undetected"
     				: (classDiagramImgName.contains("EDG_")? SEE_EDG
     						: SEE_UML);
			diagramType = "".equals(classDiagramImgName) ? "undetected"
     				: (classDiagramImgName.contains("EDG_")? "EDG"
     						: "UML Class Diagram");
			dialogTitle = MASTER_DEPENDENCY_VIOLATION;
			String[] masterNamesArray = args[3].trim().split(",");
			String masterNames = "";

			for (int i = 0; i < masterNamesArray.length; i++) {
				if (masterNamesArray[i].contains(":")){
					String [] masterName = masterNamesArray[i].split(":");
					String master = masterName[0].trim().equals(masterName[1].trim()) 
							? masterName[0].trim() : masterNamesArray[i].trim();
							masterNames +=  "".equals(masterNames) 
								? master : " , " + master;					
				} else {
					masterNames += "".equals(masterNames) 
					? masterNamesArray[i].trim() : " , " + masterNamesArray[i].trim();	
				}

			}

			errors = "<html><b>HINT: " + MASTER_DEPENDENCY_VIOLATION + "</b><br><br>"
					+ "According to the " + diagramType + ", <b><font color = 'red'> "
					+ args[1] + " </b></font> is existence dependent of<br>"
					+ "<b><font color = '#FF8C00'> "
					+ masterNames + "</b></font> " + (masterNamesArray.length > 1 ? "objects. " : "object. ")
					+ "To be able to create <br>an instance of <b><font color = 'red'> "
					+ args[1] + "</b></font> you need to create " + (masterNamesArray.length > 1 ? "instances " : "an instance ") + " of <br>"
					+ "<b><font color = '#FF8C00'>" 
					+ masterNames + " </b></font>first or select " + (masterNamesArray.length > 1 ? "from existing ones." : "an existing one.") +"<br></html>";
		} else if (WRONG_STATE.equals(args[0])) {
			buttonLabel = SEE_FSM;
			dialogTitle = SEQUENCE_CONSTRAINT;
			if (args.length > 4) {
				errors = "<html><b>HINT: " + SEQUENCE_CONSTRAINT + "</b><br><br>"
						+ "The FSM of <b>"
						+ args[3] + " </b> puts a constraint on <b><font color = '#FF8C00'>"
						+ args[5] + "</b></font>.<br>The current state of<b> "
						+ args[3] + " </b> is <b><font color = 'red'>"
						+ args[4] + ". </b></font><br>In the state <b><font color = 'red'>"
						+ args[4] + " </b></font>there is no transition enabled for the business event "
						+ "<b><font color = '#FF8C00'>"
						+ args[5] + "</b></font>.<br>Look at the FSM to find which business events "
						+ "are allowed in this state<br>or find the state(s) at which you can "
						+ "execute the business event <b><font color = '#FF8C00'>"
						+ args[5] + "</b></font>.</html>";
			} else {
				errors = "<html><b>HINT: " + SEQUENCE_CONSTRAINT + "</b><br><br>"
						+ "The FSM of <b>"
						+ args[3]+ " </b> puts a constraint on "
						+ "this business event. <br>Look at the FSM to find which "
						+ "business events are allowed in this state.</html>";
			}
		} else if (CREATE_PRECONDITION_VIOLATION.equals(args[0])) {
			buttonLabel = "".equals(classDiagramImgName) ? "undetected"
     				: (classDiagramImgName.contains("EDG_")? SEE_EDG
     						: SEE_UML); 
			diagramType = "".equals(classDiagramImgName) ? "undetected"
     				: (classDiagramImgName.contains("EDG_")? "EDG"
     						: "UML Class Diagram");
			args[3] = (args[3].lastIndexOf(",") == args[3].length() - 1) ? args[3]
					.substring(0, args[3].length() - 1) : args[3];
			System.out.println(args[3].toString().length());
			System.out.println(args[3].toString().lastIndexOf(","));
			dialogTitle = CARDINALITY_CONSTRAINT;
			errors = "<html><b>HINT: " + CARDINALITY_CONSTRAINT + "</b><br><br>"
					+ "You already have one instance of<b><font color = 'red'>  "
					+ args[3] + "</font></b> for <b><font color = '#FF8C00'>"
					+ args[1] + "</font></b><br>and according to the " + diagramType
					+ " you cannot create a second <b><font color = 'red'>"
					+ args[3] + "</font></b><br>for <b><font color = '#FF8C00'>"
					+ args[1] + "</font></b> because of the cardinality constraint<br>"
					+ "of maximum 1.<br></html>";

		} else if (END_PRECONDITION_VIOLATION.equals(args[0])) {
			buttonLabel = "".equals(classDiagramImgName) ? "undetected"
     				: (classDiagramImgName.contains("EDG_")? SEE_EDG
     						: SEE_UML);
			dialogTitle = REFERENTIAL_INTEGRITY;
			String[] dependentNamesArray = args[1].trim().split(",");
			String dependentNames = "";
			for (int i = 0; i < dependentNamesArray.length; i++) {
				String dependentName = dependentNamesArray[i].trim();
				dependentNames += "".equals(dependentNames) ? dependentName
						: "," + dependentName;
			}
			
			// FIXME we swap arguments to conform master:dependents visualization algorithm
			AtomicReference<String> arg1 = new AtomicReference<String>(args[1]);
			AtomicReference<String> arg3 = new AtomicReference<String>(args[3]);
			arg1.set(arg3.getAndSet(arg1.get()));
			args[1] = arg1.toString();
			args[3] = arg3.toString();

			
			errors = "<html><b>HINT: " + REFERENTIAL_INTEGRITY + "</b><br><br>"
					+ "You have " + (dependentNamesArray.length > 1 ? "living objects " : "a living object ") 
					+ "<b><font color = '#FF8C00'>"  
					+ arg3 + " </font></b>that " + (dependentNamesArray.length > 1 ? "are" : "is")  
					+ " existence dependent on your<br>"
					+ "<b><font color = 'red'> "
					+ arg1 + " </font></b>object. To be able to end your "
					+ arg1 + " object<br>you need to end its "
					+ "<b><font color = '#FF8C00'>dependent " 
					+ (dependentNamesArray.length > 1 ? "objects" : "object") + "</font></b> first.<br><html>";
		}
		ActionListener ActionListenerPopupImage = new ActionListener() {
			public void actionPerformed(ActionEvent actionEvent) {
				Object source = actionEvent.getSource();
				JButton src = (JButton) source;
				String userDir = System.getProperty(USER_DIRECTORY);
				String fileSeparator = System.getProperty(FILE_SEPARATOR);
				userDir = userDir.replace(fileSeparator, "/");
				String[] fileNames = new File(imgDir).list();
				String imgNamePattern = "";
				if (WRONG_STATE.equals(args[0])){
					imgNamePattern = args[3];
				} else {
					imgNamePattern = args[2].substring(0, args[2].lastIndexOf(".png"));
				}
				for (int i = 0; i < fileNames.length; i++) {
					if (WRONG_STATE.equals(args[0])){
						if (fileNames[i].contains("FSM_" + imgNamePattern + "_Default_")
								|| fileNames[i].contains("FSM_" + imgNamePattern + "_User_Specified_")) {
							args[2] = fileNames[i];
						}
					} else { // for the rest of cases it's the EDG
						if (fileNames[i].contains(imgNamePattern)) {
							args[2] = fileNames[i];
						}						
					}
				}
				float minX = Float
						.valueOf(args[2].substring(
								args[2].lastIndexOf("_") + 1,
								args[2].lastIndexOf("x")));
				float minY = Float.valueOf(args[2].substring(
						args[2].lastIndexOf("x") + 1,
						args[2].lastIndexOf(".png")));
				File imgFile = new File(imgDir + "/" + args[2]);
				Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
				if (SEE_EDG.equals(src.getText())
						|| SEE_UML.equals(src.getText())) {
					// System.out.println("opening EDG...");
					try {
						BufferedImage bimage = ImageIO.read(imgFile);
						Graphics2D g2d = bimage.createGraphics();
						// Make all filled pixels transparent
						Color transparent = new Color(0f, 0f, 1f, 1f);
						g2d.setColor(transparent);
						g2d.setComposite(AlphaComposite.Src);
						float[] objCoordinates = XMLProperties
								.getObjectCoordinates(args[1]);
						float objX = objCoordinates[0];
						float objY = objCoordinates[1];

						float x = objX - minX;
						float y = objY - minY;

						float objWidth = XMLProperties.getObjectSize(args[1])[0];
						float objHeight = XMLProperties.getObjectSize(args[1])[1];

						g2d.setStroke(new BasicStroke(5.0f)); // Set line width
						// Rectangle2D rect = new Rectangle2D.Float(x, y, width, height);
						Shape circleObj = new Ellipse2D.Float(x, y, objWidth,
								objHeight);
						g2d.setColor(Color.RED);
						g2d.draw(circleObj);

						String[] dependencyNamesArray = args[3].split(",");
						String[] dependencyNames = new String[dependencyNamesArray.length];
						
						for (int i = 0; i < dependencyNamesArray.length; i++) {
							String dependencyName = dependencyNamesArray[i].trim();
							dependencyNames[i] = dependencyName.contains("(") 
								? dependencyName.split("\\(")[0].trim() 
								       + " : " + dependencyName.split("\\(")[1].split("\\)")[0]
								                 : dependencyName;
							dependencyNames[i] = dependencyNames[i].endsWith("_" + args[1]) 
									? dependencyNames[i].substring(0,
											dependencyNames[i].lastIndexOf("_" + args[1]))
									: dependencyNames[i];
						}

						for (int i = 0; i < dependencyNames.length; i++) {
							String dpndName = dependencyNames[i].trim();
							// FIXME for multiple dependencies
							// dependencies later can be drawn as well
							// now it can loop for the same dependent ignoring the dependencies
							if (dpndName.contains(" : ")){
								dpndName = dpndName.split(" : ")[0];
							}
							float dpndWidth = XMLProperties
									.getObjectSize(dpndName)[0];
							float dpndHeight = XMLProperties
									.getObjectSize(dpndName)[1];

							float dependentX = XMLProperties
									.getObjectCoordinates(dpndName)[0];
							float dependentY = XMLProperties
									.getObjectCoordinates(dpndName)[1];

							float dpX = dependentX - minX;
							float dpY = dependentY - minY;

							// g2d.drawString("create or assign!", dpX, dpY);

							Shape circleDependent = new Ellipse2D.Float(dpX, dpY,
									dpndWidth, dpndHeight);

							g2d.setStroke(new BasicStroke(5.0f));
							g2d.setColor(new Color(255, 140, 0));
							g2d.draw(circleDependent);

							Point2D[] pathCoordinates = XMLProperties
									.getShortestPath(args[1], dpndName, minX, minY);
							Line2D line = new Line2D.Double(
									pathCoordinates[0].getX(), // should be + 14.0
									pathCoordinates[0].getY(),
									pathCoordinates[1].getX(), // should be + 12.0
									pathCoordinates[1].getY());

							float dashes[] = { 10 }; // specify dash pattern
							g2d.setPaint(Color.YELLOW);
							g2d.setStroke(new BasicStroke(4,
									BasicStroke.CAP_ROUND,
									BasicStroke.JOIN_ROUND, 5, dashes, 0));
							g2d.setColor(new Color(255, 140, 0));// Color.ORANGE
							g2d.draw(line);

						}

						g2d.dispose();

						JPanel panel = new JPanel(new MigLayout(
								"", // Layout Constraints
								"10[center]10", // Column constraints
								"20[]20[center]5")); // Row constraints);
						JLabel explanation = new JLabel(errors);
						String errorIcon = "think.png";
						ImageIcon imgIcon = new javax.swing.ImageIcon(getIconURL(
								validation.ErrorWindow.class,
								"errorsOptionPaneImages/" + errorIcon));
						explanation.setIcon(imgIcon);
						panel.add(explanation, "align center, wrap");
						panel.add(new JLabel(new ImageIcon(bimage)));

						//uncomment to add image gallery
						// MermaidImageGallery app = new MermaidImageGallery();
						// MermaidImageGallery.getPhotographLabel().setIcon(icon); 
						// app.setLocation(dim.width/2, 0); 
						// app.getRootPane().getParent().requestFocus();
						// app.setVisible(true);
						// src.getRootPane().getParent().setVisible(false);
						
						MerodeLogger.log.append("...opening error visualization for " + dialogTitle.toLowerCase() + " violation\n");
					   	MerodeLogger.log.getCaret().setVisible(true);
						src.getRootPane().getParent().setVisible(false);
						JDialog dlg = new JDialog();
						dlg.add(new JScrollPane(panel));
						dlg.setTitle("Visual explanation");
						dlg.setModal(true);
						double errorDialogHeight = 
							explanation.getPreferredSize().getHeight() + bimage.getHeight()
							+ 100; // the layout gaps
						double errorDialogWidth =
							(bimage.getWidth() > explanation.getPreferredSize().getWidth() 
									? bimage.getWidth() 
											: explanation.getPreferredSize().getWidth())
											+ 60; // the layout gaps

//						System.out.println("explanation H: " + explanation.getPreferredSize().getHeight());
//						System.out.println("explanation W: " + explanation.getPreferredSize().getWidth());
//						System.out.println("bimage H: " + bimage.getHeight());
//						System.out.println("bimage W: " + bimage.getWidth());
//						System.out.println("dialog H: " + errorDialogHeight + " dialog W: " + errorDialogWidth);
						
						if (errorDialogWidth > dim.width
								|| errorDialogHeight > dim.height){
							dlg.setSize(new Dimension (dim.width/4*3, 
									dim.height/4*3 ) );
						} else {
							dlg.setSize(new Dimension ((int)errorDialogWidth,
									(int)errorDialogHeight ) );
						}
						dlg.setLocationRelativeTo(null);
						dlg.setVisible(true);
						dlg.toFront();
						dlg.requestFocus();
						System.out.println("dialog H: " + dlg.getHeight() + " dialog W: " + dlg.getWidth());

					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else if (SEE_FSM.equals(src.getText())) {
					// System.out.println("opening FSM...");
					// File imgFile = //new File(getClass().getResource(userDir
					// + "/images/" + args[3]).getPath());
					// new File(imgDir + "/" + args[2]);
					if (args.length > 4) {
						try {
							String requiredEventName = args[5];
							String objName = args[3];
							String currentStateName = args[4];
							BufferedImage bimage = ImageIO.read(imgFile);
							Graphics2D g2d = bimage.createGraphics();
							//Color transparent = new Color(0f, 0f, 1f, 1f);
							//g2d.setColor(transparent);
							//g2d.setComposite(AlphaComposite.Src);

							float[] objCoordinates = XMLProperties
									.getStateCoordinates(currentStateName,
											objName);
							float objX = objCoordinates[0];
							float objY = objCoordinates[1];

							float x = objX - minX;
							float y = objY - minY;

							float objWidth = XMLProperties.getStateSize(
									currentStateName, objName)[0];
							float objHeight = XMLProperties.getStateSize(
									currentStateName, objName)[1];

							g2d.setStroke(new BasicStroke(5.0f)); // Set line width
							Shape circleObj = new Ellipse2D.Float(x, y,
									objWidth, objHeight);
							g2d.setColor ( new Color(255,0,0,128));//50% transparent
						    // For telling the panel to be repainted at regular intervals

							g2d.fill(circleObj);
							g2d.draw(circleObj);
							
					        Font font = new Font("Serif", Font.PLAIN, 20);
					        g2d.setFont(font);
					        //g2d.drawString("\u02DF", x+15, y+15);

							String[] eventStates = XMLProperties
									.getEventStates(requiredEventName, objName);

							for (int i = 0; i < eventStates.length; i++) {
								String stateName = eventStates[i].trim();
								float sWidth = XMLProperties.getStateSize(
										stateName, objName)[0];
								float sHeight = XMLProperties.getStateSize(
										stateName, objName)[1];

								float sX = XMLProperties.getStateCoordinates(
										stateName, objName)[0];
								float sY = XMLProperties.getStateCoordinates(
										stateName, objName)[1];

								float canvasStateX = sX - minX;
								float canvasStateY = sY - minY;

								Shape circleRequiredState = new Ellipse2D.Float(
										canvasStateX, canvasStateY, sWidth,
										sHeight);

								float dashes[] = { 7 }; // specify dash pattern
								g2d.setStroke(new BasicStroke(4,
										BasicStroke.CAP_ROUND,
										BasicStroke.JOIN_ROUND, 5, dashes, 0));
								g2d.setColor(new Color(255, 140, 0));// Color.ORANGE
								g2d.draw(circleRequiredState);
								//g2d.drawString("\u2713", canvasStateX +15, canvasStateY+15);
							}

							g2d.dispose();

							JPanel panel = new JPanel(new MigLayout(
									"", // Layout Constraints
									"10[center]10", // Column constraints
									"20[]20[]5")); // Row constraints);
							JLabel explanation = new JLabel(errors);
							String errorIcon = "think.png";
							ImageIcon imgIcon = new javax.swing.ImageIcon(getIconURL(
									validation.ErrorWindow.class,
									"errorsOptionPaneImages/" + errorIcon));
							explanation.setIcon(imgIcon);
							panel.add(explanation, "align center, wrap");
							panel.add(new JLabel(new ImageIcon(bimage)));

							//uncomment to add image gallery
							// MermaidImageGallery app = new MermaidImageGallery();
							// MermaidImageGallery.getPhotographLabel().setIcon(icon); 
							// app.setLocation(dim.width/2, 0); 
							// app.getRootPane().getParent().requestFocus();
							// app.setVisible(true);
							// src.getRootPane().getParent().setVisible(false);
							
							MerodeLogger.log.append("...opening error visualization for " + dialogTitle.toLowerCase() + " violation\n");
						    MerodeLogger.log.getCaret().setVisible(true);
							src.getRootPane().getParent().setVisible(false);
							JDialog dlg = new JDialog();
							dlg.add(new JScrollPane(panel));
							dlg.setTitle("Illegal event call");
							dlg.setModal(true);
							double errorDialogHeight = 
								explanation.getPreferredSize().getHeight() + bimage.getHeight()
								+ 100; // the layout gaps
							double errorDialogWidth =
								(bimage.getWidth() > explanation.getPreferredSize().getWidth() 
										? bimage.getWidth() 
												: explanation.getPreferredSize().getWidth())
												+ 60; // the layout gaps

//							System.out.println("explanation H: " + explanation.getPreferredSize().getHeight());
//							System.out.println("explanation W: " + explanation.getPreferredSize().getWidth());
//							System.out.println("bimage H: " + bimage.getHeight());
//							System.out.println("bimage W: " + bimage.getWidth());
//							System.out.println("dialog H: " + errorDialogHeight + " dialog W: " + errorDialogWidth);
							
							if (errorDialogWidth > dim.width
									|| errorDialogHeight > dim.height){
								dlg.setSize(new Dimension (dim.width/4*3, 
										dim.height/4*3 ) );
							} else {
								dlg.setSize(new Dimension ((int)errorDialogWidth,
										(int)errorDialogHeight ) );
							}							dlg.setLocationRelativeTo(null);
							dlg.setVisible(true);
							dlg.toFront();
							dlg.requestFocus();
							System.out.println("dialog H: " + dlg.getHeight() + " dialog W: " + dlg.getWidth());
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					} else {
						Desktop desktop = null;
						if (Desktop.isDesktopSupported()) {
							desktop = Desktop.getDesktop();
						}
						try {
							desktop.open(imgFile);
							src.getRootPane().getParent().setVisible(false);
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				} else if (SEE_ALL.equals(src.getText())) {
					// System.out.println("opening gallery...");
					try {
						BufferedImage bimage = ImageIO.read(imgFile);
						JPanel panel = new JPanel(new GridLayout(1, 0));
						panel.add(new JLabel(new ImageIcon(bimage)));

						ImageIcon icon = new ImageIcon(bimage);
						icon = new javax.swing.ImageIcon(bimage);
						MermaidImageGallery app = new MermaidImageGallery();
						MermaidImageGallery.getPhotographLabel().setIcon(icon);
						app.setLocation(dim.width / 2, 0);
						app.getRootPane().getParent().requestFocus();
						app.setVisible(true);
						src.getRootPane().getParent().setVisible(false);
						//app.setAlwaysOnTop(true);
						app.toFront();
				        //app.repaint();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else {
					System.out.println("behaviour for the button is undefined");
				}
			}
		};

		JButton b1 = new JButton(buttonLabel);
		b1.addActionListener(ActionListenerPopupImage);
		JButton b2 = new JButton(SEE_ALL);
		b2.addActionListener(ActionListenerPopupImage);
		final JButton b3 = new JButton(CANCEL);
		b3.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent event) {
				b3.getRootPane().getParent().setVisible(false);
			}
		});
		Object[] options = { b1, b2, b3 };
		ImageIcon icon = null;
		String errorIcon = "think.png";// SEE_EDG.equals(buttonLabel)?
										// "think2.jpg" :
										// "infoMessageImage.jpg";
		icon = new javax.swing.ImageIcon(getIconURL(
				validation.ErrorWindow.class,
				"errorsOptionPaneImages/" + errorIcon));
		UIManager.put("OptionPane.background", Color.white);
		UIManager.put("Panel.background", Color.white);

		MerodeLogger.log.append("...opening error explanation for " + dialogTitle.toLowerCase() + " violation\n");
	    MerodeLogger.log.getCaret().setVisible(true);
		JOptionPane.showOptionDialog(null, errors, dialogTitle,
				JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, icon,
				options, options[0]);

	}

	public static String toUpperFirstLetter(String s) {
		return (s.length() > 0) ? Character.toUpperCase(s.charAt(0))
				+ s.substring(1) : s;
	}
	
}


